diff --git a/Makefile b/Makefile
index f6c72ff..3140e64 100644
--- a/Makefile
+++ b/Makefile
@@ -1,27 +1,65 @@
-# Compile Torch model to LLVM
+# 
+# Copyright 2023 Carnegie Mellon University.
+# MIT (SEI)
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+# This material is based upon work funded and supported by the Department of
+# Defense under Contract No. FA8702-15-D-0002 with Carnegie Mellon University
+# for the operation of the Software Engineering Institute, a federally funded
+# research and development center.
+# The view, opinions, and/or findings contained in this material are those of
+# the author(s) and should not be construed as an official Government position,
+# policy, or decision, unless designated by other documentation.
+# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
+# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
+# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
+# AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
+# PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE
+# MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND
+# WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
+# [DISTRIBUTION STATEMENT A] This material has been approved for public release
+# and unlimited distribution.  Please see Copyright notice for non-US
+# Government use and distribution.
+# DM23-0186
+
+
+# makefile based on soda-opt pytorch examples
+#FILE_PATH = mlir.py
+FILE_PATH = torchscript.py
+SCRIPTS_DIR = /opt/soda/scripts
+ODIR=./output
+
+DIALECT=tosa
+#DIALECT=linalg-on-tensors
+#DIALECT=torch
+#DIALECT=raw
+#DIALECT=mhlo # doesn't work
 
-FILE_PATH=torchscript.py
-SCRIPTS_DIR=/opt/soda/scripts
-# SCRIPTS_DIR=../../../../../../scripts
-# Make sure the output directory is not empty, many files will be generated.
-# ODIR=.
-ODIR=output
-
-# Edit to change the target
 # TARGET=$(ODIR)/04_llvm.ll
 TARGET=$(ODIR)/04_llvm_baseline.mlir $(ODIR)/04_llvm_optimized.mlir
 
-all: $(TARGET)
+all : $(TARGET)
+
+torchscript.py :
+	./torchscript.py.sh
 
-$(ODIR)/01_tosa.mlir: $(FILE_PATH) 
+$(ODIR)/01_tosa.mlir: $(FILE_PATH)
 	python $(FILE_PATH) $@ --dialect=tosa
 
 $(ODIR)/02_linalg.mlir: $(ODIR)/01_tosa.mlir $(SCRIPTS_DIR)/tosa_to_linalg.sh
 	$(SCRIPTS_DIR)/tosa_to_linalg.sh $< $@
 
 # Define here which operation to outline
-$(ODIR)/03-01_linalg_searched.mlir: $(ODIR)/02_linalg.mlir 
-	soda-opt $< -o $@ -convert-operation-to-soda="anchor-op=linalg.batch_matmul" 
+$(ODIR)/03-01_linalg_searched.mlir: $(ODIR)/02_linalg.mlir
+	soda-opt $< -o $@ -convert-operation-to-soda="anchor-op=linalg.batch_matmul"
+#$(ODIR)/03-01_linalg_searched.mlir: $(ODIR)/02_linalg.mlir
+#	soda-opt $< -o $@ -convert-all-to-soda
 
 $(ODIR)/03-02_linalg_outlined.mlir: $(ODIR)/03-01_linalg_searched.mlir
 	soda-opt $< -o $@ -soda-outline-bambu-code -soda-extract-arguments-to-xml=using-bare-ptr
@@ -29,7 +67,10 @@ $(ODIR)/03-02_linalg_outlined.mlir: $(ODIR)/03-01_linalg_searched.mlir
 	mv forward_kernel_test.xml $(ODIR)/forward_kernel_test.xml
 
 $(ODIR)/03-03_linalg_isolated.mlir: $(ODIR)/03-02_linalg_outlined.mlir
-	soda-opt $< -o $@ -soda-generate-bambu-accelcode=no-aa 
+	soda-opt $< -o $@ -soda-generate-bambu-accelcode=no-aa
+
+$(ODIR)/03-04_linalg_hostcode.mlir: $(ODIR)/03-02_linalg_outlined.mlir
+	soda-opt $< -o $@ -soda-generate-bambu-hostcode
 
 # =============================================================================
 # Rules specific to non-optimized Baseline
@@ -39,22 +80,30 @@ $(ODIR)/04_llvm_baseline.mlir: $(ODIR)/03-03_linalg_isolated.mlir
 $(ODIR)/05_llvm_baseline.ll: $(ODIR)/04_llvm_baseline.mlir
 	mlir-translate $< -o $@ --mlir-to-llvmir -opaque-pointers=0
 
+# current version of bambu doesn't concurrently support
+# --memory-mapped-top and --generate-tb, --simulate
+BAMBU_OPTS=
+#BAMBU_OPTS+=--memory-mapped-top
+#BAMBU_OPTS+= --generate-tb=../../forward_kernel_test.xml --simulate --simulator=VERILATOR
+BAMBU_OPTS+=--no-clean
+
+#BAMBU_OPTS+=--data-bus-bitsize=32 --addr-bus-bitsize=32
+
 $(ODIR)/bambu/baseline/forward_kernel.v $(ODIR)/bambu/baseline/simulate_forward_kernel.sh : $(ODIR)/05_llvm_baseline.ll
 	test -d $(ODIR)/bambu/baseline || mkdir -p $(ODIR)/bambu/baseline; \
 	cd $(ODIR)/bambu/baseline; \
 	bambu \
 		-v3 --print-dot \
 		-lm --soft-float \
-		--compiler=I386_CLANG12 \
+		--compiler=I386_CLANG16 \
 		--device=xc7z020-1clg484-VVD \
-		--clock-period=5 --no-iob \
+		--clock-period=5 \
 		--experimental-setup=BAMBU-BALANCED-MP \
 		--channels-number=2 \
 		--memory-allocation-policy=ALL_BRAM \
 		--disable-function-proxy \
-		--generate-tb=../../forward_kernel_test.xml \
-  	--simulate --simulator=VERILATOR \
 		--top-fname=forward_kernel \
+                $(BAMBU_OPTS) \
 		../../../$< 2>&1 | tee ../../bambu-baseline-synth-log
 
 .PHONY: synth-baseline
@@ -84,6 +133,7 @@ $(ODIR)/bambu/optimized/forward_kernel.v $(ODIR)/bambu/optimized/simulate_forwar
 		--generate-tb=../../forward_kernel_test.xml \
 		--simulate --simulator=VERILATOR \
 		--top-fname=forward_kernel \
+                --memory-mapped-top \
 		../../../$< 2>&1 | tee ../../bambu-optimized-synth-log
 
 .PHONY: synth-optimized
@@ -100,4 +150,4 @@ clean:
 .PHONY: clean-bambu
 clean-bambu:
 	test -f $(ODIR)/bambu/baseline/forward_kernel.v && \
-	rm -rf $(ODIR)/bambu
\ No newline at end of file
+	rm -rf $(ODIR)/bambu
